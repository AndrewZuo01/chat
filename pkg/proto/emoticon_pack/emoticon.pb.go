// Copyright Â© 2023 OpenIM open source community. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.29.1
// 	protoc        v4.22.0
// source: emoticon_pack/emoticon.proto

package emoticon_pack

import (
	context "context"
	"github.com/OpenIMSDK/tools/log"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Emoticon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EmoticonId int64  `protobuf:"varint,1,opt,name=emoticon_id,json=emoticonId,proto3" json:"emoticon_id"`
	ImageURL   string `protobuf:"bytes,2,opt,name=imageURL,proto3" json:"imageURL"`
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id"`
}

func (x *Emoticon) Reset() {
	*x = Emoticon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emoticon_pack_emoticon_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Emoticon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Emoticon) ProtoMessage() {}

func (x *Emoticon) ProtoReflect() protoreflect.Message {
	mi := &file_emoticon_pack_emoticon_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Emoticon.ProtoReflect.Descriptor instead.
func (*Emoticon) Descriptor() ([]byte, []int) {
	return file_emoticon_pack_emoticon_proto_rawDescGZIP(), []int{0}
}

func (x *Emoticon) GetEmoticonId() int64 {
	if x != nil {
		return x.EmoticonId
	}
	return 0
}

func (x *Emoticon) GetImageURL() string {
	if x != nil {
		return x.ImageURL
	}
	return ""
}

func (x *Emoticon) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type AddEmoticonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId   string `protobuf:"bytes,1,opt,name=owner_id,json=ownerId,proto3" json:"owner_id"`
	ImageData string `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data"`
}

func (x *AddEmoticonReq) Reset() {
	*x = AddEmoticonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emoticon_pack_emoticon_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEmoticonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEmoticonReq) ProtoMessage() {}

func (x *AddEmoticonReq) ProtoReflect() protoreflect.Message {
	mi := &file_emoticon_pack_emoticon_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEmoticonReq.ProtoReflect.Descriptor instead.
func (*AddEmoticonReq) Descriptor() ([]byte, []int) {
	return file_emoticon_pack_emoticon_proto_rawDescGZIP(), []int{1}
}

func (x *AddEmoticonReq) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *AddEmoticonReq) GetImageData() string {
	if x != nil {
		return x.ImageData
	}
	return ""
}

type AddEmoticonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AddEmoticonResp) Reset() {
	*x = AddEmoticonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emoticon_pack_emoticon_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddEmoticonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddEmoticonResp) ProtoMessage() {}

func (x *AddEmoticonResp) ProtoReflect() protoreflect.Message {
	mi := &file_emoticon_pack_emoticon_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddEmoticonResp.ProtoReflect.Descriptor instead.
func (*AddEmoticonResp) Descriptor() ([]byte, []int) {
	return file_emoticon_pack_emoticon_proto_rawDescGZIP(), []int{2}
}

// Request to remove an emoticon from user's storage
type RemoveEmoticonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
	EmoticonId int64  `protobuf:"varint,2,opt,name=emoticon_id,json=emoticonId,proto3" json:"emoticon_id"`
}

func (x *RemoveEmoticonReq) Reset() {
	*x = RemoveEmoticonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emoticon_pack_emoticon_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveEmoticonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEmoticonReq) ProtoMessage() {}

func (x *RemoveEmoticonReq) ProtoReflect() protoreflect.Message {
	mi := &file_emoticon_pack_emoticon_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEmoticonReq.ProtoReflect.Descriptor instead.
func (*RemoveEmoticonReq) Descriptor() ([]byte, []int) {
	return file_emoticon_pack_emoticon_proto_rawDescGZIP(), []int{3}
}

func (x *RemoveEmoticonReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *RemoveEmoticonReq) GetEmoticonId() int64 {
	if x != nil {
		return x.EmoticonId
	}
	return 0
}

type RemoveEmoticonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RemoveEmoticonResp) Reset() {
	*x = RemoveEmoticonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emoticon_pack_emoticon_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveEmoticonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveEmoticonResp) ProtoMessage() {}

func (x *RemoveEmoticonResp) ProtoReflect() protoreflect.Message {
	mi := &file_emoticon_pack_emoticon_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveEmoticonResp.ProtoReflect.Descriptor instead.
func (*RemoveEmoticonResp) Descriptor() ([]byte, []int) {
	return file_emoticon_pack_emoticon_proto_rawDescGZIP(), []int{4}
}

type GetEmoticonReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=user_id,json=userId,proto3" json:"user_id"`
}

func (x *GetEmoticonReq) Reset() {
	*x = GetEmoticonReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emoticon_pack_emoticon_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmoticonReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmoticonReq) ProtoMessage() {}

func (x *GetEmoticonReq) ProtoReflect() protoreflect.Message {
	mi := &file_emoticon_pack_emoticon_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmoticonReq.ProtoReflect.Descriptor instead.
func (*GetEmoticonReq) Descriptor() ([]byte, []int) {
	return file_emoticon_pack_emoticon_proto_rawDescGZIP(), []int{5}
}

func (x *GetEmoticonReq) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type GetEmoticonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	E []*Emoticon `protobuf:"bytes,1,rep,name=e,proto3" json:"e"`
}

func (x *GetEmoticonResp) Reset() {
	*x = GetEmoticonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_emoticon_pack_emoticon_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetEmoticonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetEmoticonResp) ProtoMessage() {}

func (x *GetEmoticonResp) ProtoReflect() protoreflect.Message {
	mi := &file_emoticon_pack_emoticon_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetEmoticonResp.ProtoReflect.Descriptor instead.
func (*GetEmoticonResp) Descriptor() ([]byte, []int) {
	return file_emoticon_pack_emoticon_proto_rawDescGZIP(), []int{6}
}

func (x *GetEmoticonResp) GetE() []*Emoticon {
	if x != nil {
		return x.E
	}
	return nil
}

var File_emoticon_pack_emoticon_proto protoreflect.FileDescriptor

var file_emoticon_pack_emoticon_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x2f,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x22, 0x60, 0x0a,
	0x08, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22,
	0x4a, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f, 0x41,
	0x64, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x22, 0x4d,
	0x0a, 0x11, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x14, 0x0a,
	0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x22, 0x29, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x38,
	0x0a, 0x0f, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x25, 0x0a, 0x01, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x65,
	0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x01, 0x65, 0x32, 0xfd, 0x01, 0x0a, 0x08, 0x65, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x63, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x2e, 0x41, 0x64, 0x64, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x12, 0x55, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x20, 0x2e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x21, 0x2e, 0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63,
	0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x45, 0x6d,
	0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0b, 0x47, 0x65,
	0x74, 0x45, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x2e, 0x65, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f,
	0x74, 0x69, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x1a, 0x1e, 0x2e, 0x65, 0x6d, 0x6f, 0x74, 0x69,
	0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x2e, 0x47, 0x65, 0x74, 0x45, 0x6d, 0x6f, 0x74,
	0x69, 0x63, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x42, 0x33, 0x5a, 0x31, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4f, 0x70, 0x65, 0x6e, 0x49, 0x4d, 0x53, 0x44, 0x4b,
	0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x65, 0x6d, 0x6f, 0x74, 0x69, 0x63, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_emoticon_pack_emoticon_proto_rawDescOnce sync.Once
	file_emoticon_pack_emoticon_proto_rawDescData = file_emoticon_pack_emoticon_proto_rawDesc
)

func file_emoticon_pack_emoticon_proto_rawDescGZIP() []byte {
	file_emoticon_pack_emoticon_proto_rawDescOnce.Do(func() {
		file_emoticon_pack_emoticon_proto_rawDescData = protoimpl.X.CompressGZIP(file_emoticon_pack_emoticon_proto_rawDescData)
	})
	return file_emoticon_pack_emoticon_proto_rawDescData
}

var file_emoticon_pack_emoticon_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_emoticon_pack_emoticon_proto_goTypes = []interface{}{
	(*Emoticon)(nil),           // 0: emoticon_pack.Emoticon
	(*AddEmoticonReq)(nil),     // 1: emoticon_pack.AddEmoticonReq
	(*AddEmoticonResp)(nil),    // 2: emoticon_pack.AddEmoticonResp
	(*RemoveEmoticonReq)(nil),  // 3: emoticon_pack.RemoveEmoticonReq
	(*RemoveEmoticonResp)(nil), // 4: emoticon_pack.RemoveEmoticonResp
	(*GetEmoticonReq)(nil),     // 5: emoticon_pack.GetEmoticonReq
	(*GetEmoticonResp)(nil),    // 6: emoticon_pack.GetEmoticonResp
}
var file_emoticon_pack_emoticon_proto_depIdxs = []int32{
	0, // 0: emoticon_pack.GetEmoticonResp.e:type_name -> emoticon_pack.Emoticon
	1, // 1: emoticon_pack.emoticon.AddEmoticon:input_type -> emoticon_pack.AddEmoticonReq
	3, // 2: emoticon_pack.emoticon.RemoveEmoticon:input_type -> emoticon_pack.RemoveEmoticonReq
	5, // 3: emoticon_pack.emoticon.GetEmoticon:input_type -> emoticon_pack.GetEmoticonReq
	2, // 4: emoticon_pack.emoticon.AddEmoticon:output_type -> emoticon_pack.AddEmoticonResp
	4, // 5: emoticon_pack.emoticon.RemoveEmoticon:output_type -> emoticon_pack.RemoveEmoticonResp
	6, // 6: emoticon_pack.emoticon.GetEmoticon:output_type -> emoticon_pack.GetEmoticonResp
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_emoticon_pack_emoticon_proto_init() }
func file_emoticon_pack_emoticon_proto_init() {
	if File_emoticon_pack_emoticon_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_emoticon_pack_emoticon_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Emoticon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_emoticon_pack_emoticon_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEmoticonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_emoticon_pack_emoticon_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddEmoticonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_emoticon_pack_emoticon_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveEmoticonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_emoticon_pack_emoticon_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveEmoticonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_emoticon_pack_emoticon_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmoticonReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_emoticon_pack_emoticon_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetEmoticonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_emoticon_pack_emoticon_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_emoticon_pack_emoticon_proto_goTypes,
		DependencyIndexes: file_emoticon_pack_emoticon_proto_depIdxs,
		MessageInfos:      file_emoticon_pack_emoticon_proto_msgTypes,
	}.Build()
	File_emoticon_pack_emoticon_proto = out.File
	file_emoticon_pack_emoticon_proto_rawDesc = nil
	file_emoticon_pack_emoticon_proto_goTypes = nil
	file_emoticon_pack_emoticon_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// EmoticonClient is the client API for Emoticon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EmoticonClient interface {
	AddEmoticon(ctx context.Context, in *AddEmoticonReq, opts ...grpc.CallOption) (*AddEmoticonResp, error)
	RemoveEmoticon(ctx context.Context, in *RemoveEmoticonReq, opts ...grpc.CallOption) (*RemoveEmoticonResp, error)
	GetEmoticon(ctx context.Context, in *GetEmoticonReq, opts ...grpc.CallOption) (*GetEmoticonResp, error)
}

type emoticonClient struct {
	cc grpc.ClientConnInterface
}

func NewEmoticonClient(cc grpc.ClientConnInterface) EmoticonClient {
	return &emoticonClient{cc}
}

func (c *emoticonClient) AddEmoticon(ctx context.Context, in *AddEmoticonReq, opts ...grpc.CallOption) (*AddEmoticonResp, error) {
	log.ZDebug(ctx, "inter AddEmoticon", "in", in)
	out := new(AddEmoticonResp)
	err := c.cc.Invoke(ctx, "/emoticon_pack.emoticon/AddEmoticon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emoticonClient) RemoveEmoticon(ctx context.Context, in *RemoveEmoticonReq, opts ...grpc.CallOption) (*RemoveEmoticonResp, error) {
	out := new(RemoveEmoticonResp)
	err := c.cc.Invoke(ctx, "/emoticon_pack.emoticon/RemoveEmoticon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *emoticonClient) GetEmoticon(ctx context.Context, in *GetEmoticonReq, opts ...grpc.CallOption) (*GetEmoticonResp, error) {
	out := new(GetEmoticonResp)
	err := c.cc.Invoke(ctx, "/emoticon_pack.emoticon/GetEmoticon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EmoticonServer is the server API for Emoticon service.
type EmoticonServer interface {
	AddEmoticon(context.Context, *AddEmoticonReq) (*AddEmoticonResp, error)
	RemoveEmoticon(context.Context, *RemoveEmoticonReq) (*RemoveEmoticonResp, error)
	GetEmoticon(context.Context, *GetEmoticonReq) (*GetEmoticonResp, error)
}

// UnimplementedEmoticonServer can be embedded to have forward compatible implementations.
type UnimplementedEmoticonServer struct {
}

func (*UnimplementedEmoticonServer) AddEmoticon(context.Context, *AddEmoticonReq) (*AddEmoticonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEmoticon not implemented")
}
func (*UnimplementedEmoticonServer) RemoveEmoticon(context.Context, *RemoveEmoticonReq) (*RemoveEmoticonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEmoticon not implemented")
}
func (*UnimplementedEmoticonServer) GetEmoticon(context.Context, *GetEmoticonReq) (*GetEmoticonResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmoticon not implemented")
}

func RegisterEmoticonServer(s *grpc.Server, srv EmoticonServer) {
	s.RegisterService(&_Emoticon_serviceDesc, srv)
}

func _Emoticon_AddEmoticon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEmoticonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoticonServer).AddEmoticon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emoticon_pack.emoticon/AddEmoticon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoticonServer).AddEmoticon(ctx, req.(*AddEmoticonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emoticon_RemoveEmoticon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEmoticonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoticonServer).RemoveEmoticon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emoticon_pack.emoticon/RemoveEmoticon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoticonServer).RemoveEmoticon(ctx, req.(*RemoveEmoticonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Emoticon_GetEmoticon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmoticonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EmoticonServer).GetEmoticon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/emoticon_pack.emoticon/GetEmoticon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EmoticonServer).GetEmoticon(ctx, req.(*GetEmoticonReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Emoticon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "emoticon_pack.emoticon",
	HandlerType: (*EmoticonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEmoticon",
			Handler:    _Emoticon_AddEmoticon_Handler,
		},
		{
			MethodName: "RemoveEmoticon",
			Handler:    _Emoticon_RemoveEmoticon_Handler,
		},
		{
			MethodName: "GetEmoticon",
			Handler:    _Emoticon_GetEmoticon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "emoticon_pack/emoticon.proto",
}
